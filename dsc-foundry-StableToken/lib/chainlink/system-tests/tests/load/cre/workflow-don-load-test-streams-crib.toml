duration = "2h" # specific to chaos test, ignore this value if you are performing a chaos test

# ----- BLOCKCHAIN CONFIGURATION -----
# Sets up a local Anvil blockchain for testing with 5-second block time
[[blockchains]]
chain_id = "1337"
type = "anvil"
docker_cmd_params = ["-b", "5"]

# ----- BINARY PATHS -----
# Path to the mock capability binary
[binaries_config]
mock_capability_binary_path = "../../../../../capabilities/bin/amd64/mock"

# ----- JOB DISTRIBUTOR -----
# Docker image for the job distributor service - hardcoded version
[jd]
image = "job-distributor:0.9.0" #Currently this is hardcoded, leave this as it is

# ----- MOCK CAPABILITIES -----
# Trigger capability that simulates streams of data
[[mock_capabilities]]
name="streams-trigger"
version= "2.0.0"
type="trigger"
description="streams trigger mock"

# Target capability that simulates writing data to Ethereum
[[mock_capabilities]]
name="write_ethereum"
version= "1.0.0"
type="target"
description="write trigger mock"

# ----- TEST CONFIGURATION -----
# Parameters for the Workflow DON load test
[workflow_load]
streams = 1000              # Number of streams to simulate
jobs = 2                    # Number of jobs per stream

# ----- INFRASTRUCTURE SETUP -----
# Configures AWS-based CRIB infrastructure
[infra]
type = "crib"

# CRIB deployment configuration for AWS
[infra.crib]
namespace = "crib-workflow-don-load-test"
folder_location = "../../../../../crib/deployments/cre"  # Path to CRIB deployment folder
provider = "aws"

# Team information for resource allocation and billing
[infra.crib.team_input]
team="cre"
product="workflow-don"
component="workflow-don"
cost_center="capabilities-df-migration-performance-tests"

# ----- WORKFLOW NODES CONFIGURATION -----
# Setup for a 17-node Workflow DON cluster (includes bootstrap node)
[[nodesets]]
nodes = 17
override_mode = "all"           # Apply same configuration to all nodes
http_port_range_start = 10100   # Starting port for HTTP endpoints
name = "workflow"

# Database configuration for the workflow nodes
[nodesets.db]
image = "postgres:12.0"
port = 13000
volume_name = "workflow_volume"

# Chainlink node configuration for workflow nodes
[[nodesets.node_specs]]
[nodesets.node_specs.node]
image = "public.ecr.aws/chainlink/chainlink:2.23.0-ubuntu20" # Chainlink node image for AWS deployment
user_config_overrides = """
       [Feature]
      LogPoller = true
      FeedsManager = true
      [OCR2]
      Enabled = true
      DatabaseTimeout = '1s'
      """

# ----- CAPABILITIES NODES CONFIGURATION -----
# Setup for a 5-node Capabilities cluster  (includes bootstrap node)
[[nodesets]]
nodes = 5
override_mode = "all"           # Apply same configuration to all nodes
http_port_range_start = 10200   # Starting port for HTTP endpoints
name = "capabilities"

# Database configuration for the capabilities nodes
[nodesets.db]
image = "postgres:12.0"
port = 13200

# Chainlink node configuration for capabilities nodes
[[nodesets.node_specs]]
[nodesets.node_specs.node]
image = "public.ecr.aws/chainlink/chainlink:2.23.0-ubuntu20" # Chainlink node image for AWS deployment
user_config_overrides = """
      [Feature]
      LogPoller = true
      FeedsManager = true
      [OCR2]
      Enabled = true
      DatabaseTimeout = '1s'
      """

# ----- CHAOS TESTING CONFIGURATION -----
#Settings for chaos engineering tests (optional), for simple load test you can ignore it
duration = "2h"
[chaos]
# chaos mode can be "rpc", "full" or "clean"
# no experiments will be run in "clean" mode
mode = "clean"
# latency that we add to Aptos or EVM node to simulate realistic production scenario
# latency works only with mode = "rpc"
latency = "200ms"
# latency jitter that we add to Aptos or EVM node to simulate realistic production scenario
# jitter works only with mode = "rpc"
jitter = "200ms"
# dashboard to which add annotation when experiments start and end
dashboard_uids = [""]
# wait before starting chaos tests
wait_before_start = "30s"
# full chaos experiment interval, time from chaos start to end + recovery
experiment_full_interval = "1m"
# chaos experiment injection interval - time from chaos start to end
experiment_injection_interval = "30s"