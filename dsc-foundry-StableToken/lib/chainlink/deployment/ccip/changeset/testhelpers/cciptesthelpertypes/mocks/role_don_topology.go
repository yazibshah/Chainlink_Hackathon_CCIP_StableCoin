// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	ccipocr3 "github.com/smartcontractkit/chainlink-ccip/pkg/types/ccipocr3"

	mock "github.com/stretchr/testify/mock"
)

// RoleDONTopology is an autogenerated mock type for the RoleDONTopology type
type RoleDONTopology struct {
	mock.Mock
}

type RoleDONTopology_Expecter struct {
	mock *mock.Mock
}

func (_m *RoleDONTopology) EXPECT() *RoleDONTopology_Expecter {
	return &RoleDONTopology_Expecter{mock: &_m.Mock}
}

// ChainToNodeMapping provides a mock function with given fields: nonBootstrapP2pIDs, nonHomeChainSelectors, homeChainSelector
func (_m *RoleDONTopology) ChainToNodeMapping(nonBootstrapP2pIDs [][32]byte, nonHomeChainSelectors []ccipocr3.ChainSelector, homeChainSelector ccipocr3.ChainSelector) (map[ccipocr3.ChainSelector][][32]byte, error) {
	ret := _m.Called(nonBootstrapP2pIDs, nonHomeChainSelectors, homeChainSelector)

	if len(ret) == 0 {
		panic("no return value specified for ChainToNodeMapping")
	}

	var r0 map[ccipocr3.ChainSelector][][32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func([][32]byte, []ccipocr3.ChainSelector, ccipocr3.ChainSelector) (map[ccipocr3.ChainSelector][][32]byte, error)); ok {
		return rf(nonBootstrapP2pIDs, nonHomeChainSelectors, homeChainSelector)
	}
	if rf, ok := ret.Get(0).(func([][32]byte, []ccipocr3.ChainSelector, ccipocr3.ChainSelector) map[ccipocr3.ChainSelector][][32]byte); ok {
		r0 = rf(nonBootstrapP2pIDs, nonHomeChainSelectors, homeChainSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[ccipocr3.ChainSelector][][32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([][32]byte, []ccipocr3.ChainSelector, ccipocr3.ChainSelector) error); ok {
		r1 = rf(nonBootstrapP2pIDs, nonHomeChainSelectors, homeChainSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleDONTopology_ChainToNodeMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChainToNodeMapping'
type RoleDONTopology_ChainToNodeMapping_Call struct {
	*mock.Call
}

// ChainToNodeMapping is a helper method to define mock.On call
//   - nonBootstrapP2pIDs [][32]byte
//   - nonHomeChainSelectors []ccipocr3.ChainSelector
//   - homeChainSelector ccipocr3.ChainSelector
func (_e *RoleDONTopology_Expecter) ChainToNodeMapping(nonBootstrapP2pIDs interface{}, nonHomeChainSelectors interface{}, homeChainSelector interface{}) *RoleDONTopology_ChainToNodeMapping_Call {
	return &RoleDONTopology_ChainToNodeMapping_Call{Call: _e.mock.On("ChainToNodeMapping", nonBootstrapP2pIDs, nonHomeChainSelectors, homeChainSelector)}
}

func (_c *RoleDONTopology_ChainToNodeMapping_Call) Run(run func(nonBootstrapP2pIDs [][32]byte, nonHomeChainSelectors []ccipocr3.ChainSelector, homeChainSelector ccipocr3.ChainSelector)) *RoleDONTopology_ChainToNodeMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([][32]byte), args[1].([]ccipocr3.ChainSelector), args[2].(ccipocr3.ChainSelector))
	})
	return _c
}

func (_c *RoleDONTopology_ChainToNodeMapping_Call) Return(_a0 map[ccipocr3.ChainSelector][][32]byte, _a1 error) *RoleDONTopology_ChainToNodeMapping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoleDONTopology_ChainToNodeMapping_Call) RunAndReturn(run func([][32]byte, []ccipocr3.ChainSelector, ccipocr3.ChainSelector) (map[ccipocr3.ChainSelector][][32]byte, error)) *RoleDONTopology_ChainToNodeMapping_Call {
	_c.Call.Return(run)
	return _c
}

// NewRoleDONTopology creates a new instance of RoleDONTopology. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoleDONTopology(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoleDONTopology {
	mock := &RoleDONTopology{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
