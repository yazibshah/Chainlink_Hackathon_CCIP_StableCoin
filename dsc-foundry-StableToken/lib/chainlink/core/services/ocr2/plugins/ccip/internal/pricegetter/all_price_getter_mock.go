// Code generated by mockery v2.53.0. DO NOT EDIT.

package pricegetter

import (
	context "context"
	big "math/big"

	ccipcommon "github.com/smartcontractkit/chainlink/v2/core/services/ocr2/plugins/ccip/internal/ccipcommon"

	mock "github.com/stretchr/testify/mock"
)

// MockAllTokensPriceGetter is an autogenerated mock type for the AllTokensPriceGetter type
type MockAllTokensPriceGetter struct {
	mock.Mock
}

type MockAllTokensPriceGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAllTokensPriceGetter) EXPECT() *MockAllTokensPriceGetter_Expecter {
	return &MockAllTokensPriceGetter_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockAllTokensPriceGetter) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAllTokensPriceGetter_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockAllTokensPriceGetter_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockAllTokensPriceGetter_Expecter) Close() *MockAllTokensPriceGetter_Close_Call {
	return &MockAllTokensPriceGetter_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockAllTokensPriceGetter_Close_Call) Run(run func()) *MockAllTokensPriceGetter_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAllTokensPriceGetter_Close_Call) Return(_a0 error) *MockAllTokensPriceGetter_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAllTokensPriceGetter_Close_Call) RunAndReturn(run func() error) *MockAllTokensPriceGetter_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobSpecTokenPricesUSD provides a mock function with given fields: ctx
func (_m *MockAllTokensPriceGetter) GetJobSpecTokenPricesUSD(ctx context.Context) (map[ccipcommon.TokenID]*big.Int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetJobSpecTokenPricesUSD")
	}

	var r0 map[ccipcommon.TokenID]*big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[ccipcommon.TokenID]*big.Int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[ccipcommon.TokenID]*big.Int); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[ccipcommon.TokenID]*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAllTokensPriceGetter_GetJobSpecTokenPricesUSD_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobSpecTokenPricesUSD'
type MockAllTokensPriceGetter_GetJobSpecTokenPricesUSD_Call struct {
	*mock.Call
}

// GetJobSpecTokenPricesUSD is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAllTokensPriceGetter_Expecter) GetJobSpecTokenPricesUSD(ctx interface{}) *MockAllTokensPriceGetter_GetJobSpecTokenPricesUSD_Call {
	return &MockAllTokensPriceGetter_GetJobSpecTokenPricesUSD_Call{Call: _e.mock.On("GetJobSpecTokenPricesUSD", ctx)}
}

func (_c *MockAllTokensPriceGetter_GetJobSpecTokenPricesUSD_Call) Run(run func(ctx context.Context)) *MockAllTokensPriceGetter_GetJobSpecTokenPricesUSD_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAllTokensPriceGetter_GetJobSpecTokenPricesUSD_Call) Return(_a0 map[ccipcommon.TokenID]*big.Int, _a1 error) *MockAllTokensPriceGetter_GetJobSpecTokenPricesUSD_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAllTokensPriceGetter_GetJobSpecTokenPricesUSD_Call) RunAndReturn(run func(context.Context) (map[ccipcommon.TokenID]*big.Int, error)) *MockAllTokensPriceGetter_GetJobSpecTokenPricesUSD_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenPricesUSD provides a mock function with given fields: ctx, tokens
func (_m *MockAllTokensPriceGetter) GetTokenPricesUSD(ctx context.Context, tokens []ccipcommon.TokenID) (map[ccipcommon.TokenID]*big.Int, error) {
	ret := _m.Called(ctx, tokens)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenPricesUSD")
	}

	var r0 map[ccipcommon.TokenID]*big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []ccipcommon.TokenID) (map[ccipcommon.TokenID]*big.Int, error)); ok {
		return rf(ctx, tokens)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []ccipcommon.TokenID) map[ccipcommon.TokenID]*big.Int); ok {
		r0 = rf(ctx, tokens)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[ccipcommon.TokenID]*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []ccipcommon.TokenID) error); ok {
		r1 = rf(ctx, tokens)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAllTokensPriceGetter_GetTokenPricesUSD_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenPricesUSD'
type MockAllTokensPriceGetter_GetTokenPricesUSD_Call struct {
	*mock.Call
}

// GetTokenPricesUSD is a helper method to define mock.On call
//   - ctx context.Context
//   - tokens []ccipcommon.TokenID
func (_e *MockAllTokensPriceGetter_Expecter) GetTokenPricesUSD(ctx interface{}, tokens interface{}) *MockAllTokensPriceGetter_GetTokenPricesUSD_Call {
	return &MockAllTokensPriceGetter_GetTokenPricesUSD_Call{Call: _e.mock.On("GetTokenPricesUSD", ctx, tokens)}
}

func (_c *MockAllTokensPriceGetter_GetTokenPricesUSD_Call) Run(run func(ctx context.Context, tokens []ccipcommon.TokenID)) *MockAllTokensPriceGetter_GetTokenPricesUSD_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]ccipcommon.TokenID))
	})
	return _c
}

func (_c *MockAllTokensPriceGetter_GetTokenPricesUSD_Call) Return(_a0 map[ccipcommon.TokenID]*big.Int, _a1 error) *MockAllTokensPriceGetter_GetTokenPricesUSD_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAllTokensPriceGetter_GetTokenPricesUSD_Call) RunAndReturn(run func(context.Context, []ccipcommon.TokenID) (map[ccipcommon.TokenID]*big.Int, error)) *MockAllTokensPriceGetter_GetTokenPricesUSD_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAllTokensPriceGetter creates a new instance of MockAllTokensPriceGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAllTokensPriceGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAllTokensPriceGetter {
	mock := &MockAllTokensPriceGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
